I. Class hierarchy (some classes - e.g. Interface - omitted)
Game________
|           |
Level       Screen
|
LevelComponent
|
Creature_______________________________
|                                      |              
|                                      |
|                                      |
VisualComponent___________________    Behavior       
|            |           |        |
|            |           |        |
|            |           |        |
Sprite  VectorDrawing   Line    True Type Writing  
|
Texture

I.1 Creature, LevelComponent and Level - a more detailed look

Level:
    private nonstatic class members:
	    //Map holding all level components grouped by their type
		std::map<LevelComponentType, std::vector<LevelComponent*>> level_components = {};
		<SOME OMITTED>
	public nonstatic class members:
	    //Object spawning new LevelComponents
		FactorySpawningLevelComponents* ptr_components_factory;
		<SOME OMITTED>

LevelComponent
	private nonstatic class members:
	    //Vector holding all creatures belonging to a LevelComponent
	    std::vector<Creature*> creatures = {};
		<SOME OMITTED>
	public nonstatic class members:
	    //Object spawning new Creatures
	    FactorySpawningCreatures* ptr_creatures_factory;
		<SOME OMITTED>

Creature:
    static class members:
	    //Vector holding pointers to all creatures currently present in game
        static std::vector <Creature*> current_environment;
        //Holds address of Creature acting as current main character
        static Creature* ptr_current_main_charater;
		<SOME OMITTED>

CONCEPT:
LevelComponent is the enitity taking care of its Creatures. It has a factory for spawning them (ptr_creatures_factory) and methods:
		Creature* AddCreature(CreatureType my_type, SDL_Rect* ptr_my_position, InsertionMode my_mode, std::string my_trigger_signal="");
		void RemoveCreature(Creature* ptr_my_creature);
		void RemoveAllCreatures();

Level takes care of its LevelComponents. Factory for spawning components is defined there (ptr_components_factory).
Level has methods:
		void RemoveLevelComponent(LevelComponent* ptr_my_component);
When a LevelComponent is removed, it also removes all its Creatures.

Take note, that Creature* pointers are present in two arrays:
    - static one "current_environment" in Creature class. This array serves when collissions between creatures are evaluated.
	  Also this array stores pointer to current main character (because main hero creature is intended to live
	  longer than any given LevelComponent).
	- "creatures" in LevelComponent class. This array is for grouping Creatures in components.


	              Level                                  => CONTAINS std::map<LevelComponentType, std::vector<LevelComponent*>> level_component_types_vs_level_components
		
					/\
                   /  \
				  /    \
				 /      \
		LevelComponent  LevelComponent                   => CONTAINS std::vector<Creature*> creatures
		   /\                    /\
          /  \                  /  \
		 /    \                /    \
  Creature   Creature       Creature Creature
     \         \               /       /
	  \         \             /       /
	   \         \           /       /
	    \         \         /       /
		 static std::vector <Creature*> current_environment   ___\
		  static Creature* ptr_current_main_charater              \   STATIC MEMBERS OF CREATURE CLASS
																  /
		                                                      ---/  


When a Creature is deleted, its pointer has to be removed from both arrays!


II. Cyclic events concept

Level, LevelComponent and Creature instances have cyclic_events arrays of following type:

Level =>		        std::vector<std::function<void(Level*)>> cyclic_actions = {};
LevelComponent => 		std::vector<std::function<void(LevelComponent*)>> cyclic_actions = {};
Creature =>      		std::vector<std::function<void(Creature*)>> cyclic_actions = {};

These arrays hold lambda functions like e.g.:

		//Cyclic action to fire all triggers hit by hero
		std::function<void(Level*)> func_fire_triggers = [](Level* ptr_level)
		{
			std::vector<LevelComponent*>* ptr_trigger_components_vector = ptr_level->TellPointerToSpecificComponentTypeArray(levco_triggers);
			for (LevelComponent* ptr_component_with_triggers : *ptr_trigger_components_vector)
			{
				ptr_level->PerformActionsForTriggersHitByHero(ptr_component_with_triggers);
			}
		};

Lambdas get pushed into cyclic_events array.
Then there is a method:

void PerformCyclicActions();

called on currently loaded level during every game loop.

This method does two things:
    1. Performs all lambdas stored in Level cyclic_events array
	2. Calls PerformCyclicActions on each LevelComponent stored in level_components array.
	    2a. Method mentioned in 2. performs all lambdas stored in LevelComponent cyclic_events array
		2b. Calls PerformCyclicActions on each Creature stored in creatures array
		    2aa.Method mentioned in 2a. performs all lambdas stored in Creature cyclic_events array

This way a single call of PerformCyclicActions on a Level causes all the cyclic_actions from related LevelComponents and Creatures to be also performed.

Why lambdas?

Lambdas were used instead of "ordinary" function calls because this way cyclic events list may be easily altered durign game. All it takes is to push/remove
a lambda into/from vector.
On the other hand, if there's a cyclic action ALWAYS to be performed, it can be an "ordinary" function called within PerformCyclicActions().

III. Triggers concept

CreatureEventTrigger is a Creature, which causes a special effect when collission with main character is detected (Main Character is also a Creature).
If hit, CreatureEventTrigger produces a "signal" in a form of std::string. This signal is associated with an action to perform by Level object, which
has a mapping between singnals and events.

Here is the procedure:

1. Level has a method "void PerformActionsForTriggersHitByHero(LevelComponent* ptr_component_containing_triggers)".
   Level also has a cyclic event func_fire_triggers in a form of lambda pushed into Level's cyclic_events.
2. During every game cycle a check is performed if any CreatureEventTrigger was hit by main character.
3. If yes, the following flow occurs:

Level:                      std::map<std::string, std::function<void()>>signals_vs_events
                                                                                     ^
                                                                                     |
                                                                                     |CALLS LAMBDAS ASSOCIATED WITH RECEIVED STRINGS
                                                                                     |                                                                              
Level:                      void PerformActionsForTriggersHitByHero(LevelComponent* ptr_component_containing_triggers)
                                   |                                 ^
		                           |CALLS                            |
		                           |                                 |RETURNS ARRAY OF ALL STRINGS PRODUCED BY HIT TRIGGERS
		                           V                                 |
LevelComponentTriggers:     std::vector<std::string> RunTriggersHitByHero()
                                       |                       ^
								       |CALLS                  |
								       |                       |RETURNS STRING
								       V                       |
CreatureEventTrigger:       std::string CreatureEventTrigger::GiveSignal()


---------------------------------FLOW-DIRECTION------------------------------------------------------------------------------------->


IV Behavior concept

Behavior defines automated actions taken by Creature.
Decisions on what to do is taken on two levels:
1. What behavior pattern does Creature follow
2. What behavior mode is active

Behavior pattern is a set of rules, like "when certain Character is within sight - follow him,
otherwise wander randomly on map."

Behavior mode orders Creature to do a single thing - e.g. follow certain character.

V Level finishing

One of every Level's cyclic tasks is to seek if player has won or lost and therefore if the level should be finished:

see these lambdas in Level header file:

    std::function<void(Level*)> func_check_and_react_if_player_won = [](Level* ptr_level)
	std::function<void(Level*)> func_check_and_react_if_player_lost = [](Level* ptr_level)

But how the game exactly does take decision if level should be finished/restarted?

Here is the flow:

1. Level performs win/loose check every cycle. Here is the win case:

		//Cyclic action to check if winning conditions were met
		std::function<void(Level*)> func_check_and_react_if_player_won = [](Level* ptr_level)
		{
			if (ptr_level->TellIfPlayerWon())
			{
				ptr_level->FinishLevel(ending_victory);
			}
		};

2. Finish Level method is called if level is won/lost. This is a virtual method, but should always contain a call to the parent method at the end.
See example FinishLevel method for Level Nine Mazes:

void LevelNineMazes::FinishLevel(LevelEnding my_ending)
{
	Pause();
	if (my_ending == ending_victory)
	{
		printf("You've beaten nine mazes!\n");
	}
	else if (my_ending == ending_defeat)
	{
		printf("You've been beaten.\n");
	}
	else
	{
		printf("Some other ending!\n");
	}
	//Mandatory call to parent method
	Level::FinishLevel(my_ending);
}

The idea is that Finish Method provides a space to perform actions like e.g. exiting animation before level is ultimately closed.

Parent method sets the is_level_finished bool to True:

void Level::FinishLevel(LevelEnding my_ending)
{
	SetLevelEnding(my_ending);
	Logger::Log("Level finished", debug_info);
	is_level_finished = true;
}

3. The value of boolean is_level_finished is being observed by Game::SwitchBetweenLevelsIfNeeded().
This method is called at the end of each main cycle. If this variable is set to True, method also checks what ending the level quit with
and perform appropriate actions (loads next level, restarts the same one e.t.c).

Notice, that Menu is a level too! It is reached a bit differently - has two dedicated level endings: ending_entering_menu, ending_exiting_menu.
In Interface code you may note, that these endings are reached by direct call to FinishLevel method, without winning or loosing a level (example for exiting menu is shown):

	    if (ptr_my_event_handler->type == SDL_KEYDOWN &&
		    ptr_my_event_handler->key.keysym.sym == SDLK_ESCAPE &&
		    ptr_my_event_handler->key.repeat == 0)
	    {
		    Game::ptr_current_level->FinishLevel(ending_exiting_menu);
	    }